// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	store "metrics/internal/store"

	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the StorageInterface type
type MockStore struct {
	mock.Mock
}

// GetBatchMetrics provides a mock function with given fields: ctx
func (_m *MockStore) GetBatchMetrics(ctx context.Context) ([]store.Metrics, bool) {
	ret := _m.Called(ctx)

	var r0 []store.Metrics
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context) ([]store.Metrics, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []store.Metrics); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetCounter provides a mock function with given fields: ctx, nameMetric
func (_m *MockStore) GetCounter(ctx context.Context, nameMetric string) (int64, bool) {
	ret := _m.Called(ctx, nameMetric)

	var r0 int64
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, bool)); ok {
		return rf(ctx, nameMetric)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, nameMetric)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, nameMetric)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetCounters provides a mock function with given fields: ctx
func (_m *MockStore) GetCounters(ctx context.Context) (map[string]int64, bool) {
	ret := _m.Called(ctx)

	var r0 map[string]int64
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]int64, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetGauge provides a mock function with given fields: ctx, nameMetric
func (_m *MockStore) GetGauge(ctx context.Context, nameMetric string) (float64, bool) {
	ret := _m.Called(ctx, nameMetric)

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, bool)); ok {
		return rf(ctx, nameMetric)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, nameMetric)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, nameMetric)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetGauges provides a mock function with given fields: ctx
func (_m *MockStore) GetGauges(ctx context.Context) (map[string]float64, bool) {
	ret := _m.Called(ctx)

	var r0 map[string]float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]float64, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]float64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// LoadMetrics provides a mock function with given fields: filePath
func (_m *MockStore) LoadMetrics(filePath string) bool {
	ret := _m.Called(filePath)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Ping provides a mock function with given fields: ctx
func (_m *MockStore) Ping(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SaveMetrics provides a mock function with given fields: filePath
func (_m *MockStore) SaveMetrics(filePath string) bool {
	ret := _m.Called(filePath)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateCounter provides a mock function with given fields: ctx, nameMetric, valueMetric
func (_m *MockStore) UpdateCounter(ctx context.Context, nameMetric string, valueMetric int64) bool {
	ret := _m.Called(ctx, nameMetric, valueMetric)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) bool); ok {
		r0 = rf(ctx, nameMetric, valueMetric)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateGauge provides a mock function with given fields: ctx, nameMetric, valueMetric
func (_m *MockStore) UpdateGauge(ctx context.Context, nameMetric string, valueMetric float64) bool {
	ret := _m.Called(ctx, nameMetric, valueMetric)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) bool); ok {
		r0 = rf(ctx, nameMetric, valueMetric)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
